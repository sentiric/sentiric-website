# =================================================================
#    SENTIRIC PLATFORM - STANDART CI/CD DOCKER YAYINLAMA (v3.3 - Observable Build)
# =================================================================
name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Check out the repo with submodules
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          fetch-depth: 0 # Git geçmişini tam çekerek commit hash'ini alabilmek için

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract service name from repository name
        id: get_service_name
        run: |
          REPO_NAME="${{ github.repository }}"
          echo "SERVICE_NAME=${REPO_NAME#*/}" >> $GITHUB_ENV

      # YENİ: Build argümanlarını hazırla
      - name: Prepare Build Arguments
        id: prep
        run: |
          echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV
          echo "GIT_COMMIT=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          # Go mod dosyasından versiyonu okumak daha karmaşık olduğu için şimdilik commit'e odaklanalım
          # Veya buraya statik bir versiyon numarası da ekleyebilirsiniz.
          echo "SERVICE_VERSION=1.0.0" >> $GITHUB_ENV

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository }}:latest, ghcr.io/${{ github.repository }}:${{ env.SERVICE_VERSION }}-${{ env.GIT_COMMIT }}
          # build-args ile Dockerfile'a yeni bilgileri gönder
          build-args: |
            SERVICE_NAME=${{ env.SERVICE_NAME }}
            BUILD_DATE=${{ env.BUILD_DATE }}
            GIT_COMMIT=${{ env.GIT_COMMIT }}
            SERVICE_VERSION=${{ env.SERVICE_VERSION }}
          no-cache: true